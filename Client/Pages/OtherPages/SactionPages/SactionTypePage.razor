@implements IDisposable

@if (allState.ShowSactionType)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Saction Types</h4>
                        <button class="btn btn-ouline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i>
                            Add Type
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden;overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Type</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Types is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Types)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item!)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No Type added yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>
<SactionTypeDialog @ref="sactionTypeDialog"
                    HandleSaveOperationEvent="HandleSaveOperationEvent"
                   SactionType="SactionType" />
@code {
    SactionTypeDialog? sactionTypeDialog;
    SactionType SactionType = new();
    public string Title { get; set; } = "Add";
    public List<SactionType> Types { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => Types = await sactionTypeService.GetAll(Constants.SactionTypeBaseUrl);

    void OpenDialog() => sactionTypeDialog?.OpenDialog();

    //Add or update
    private async Task HandleSaveOperationEvent(SactionType item)
    {
        bool successCheck = false;
        if (item.Id > 0)
        {
            var result = await sactionTypeService
            .Update(item, Constants.SactionTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await sactionTypeService
           .Insert(item, Constants.SactionTypeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            SactionType = new();
            await GetTypes();
            sactionTypeDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    protected void EditClicked(SactionType item)
    {
        sactionTypeDialog?.ChangeTitle("Update");
        SactionType = item;
        OpenDialog();
    }

    //Delete
    protected async Task DeleteClicked(SactionType item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {item.Name}", "Confirm Delete");
        if (!confirm) return;

        var response = await sactionTypeService.DeleteId(item.Id, Constants.SactionTypeBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetTypes();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
    public void Dispose() => allState.Action -= StateHasChanged;
}
