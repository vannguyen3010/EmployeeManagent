@using Client.Pages.OtherPages.OvertimePages


@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i>
                                Add Employee
                            </button>
                        </div>
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                            <SfGrid DataSource="@Employees" AllowPaging="true" AllowSorting="true"
                                    Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee!.Photo" alt="@employee.Name" width="150px" height="150px" />
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(Employee.CivilId)" HeaderText="Civil ID"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.FileNumber)" HeaderText="File Number"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Name)" HeaderText="Name"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.TelephoneNumber)" HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.JobName)" HeaderText="JobName"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Branch.Name)" HeaderText="Branch"></GridColumn>
                                    <GridColumn Field="@nameof(Employee.Town.Name)" HeaderText="Town"></GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopup(employee!)"></i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div>
                            <div class="card-footer"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultContries"
                         Cities="SelectedCities"
                         Towns="SelectedTowns"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="SelectedDepartments"
                         Branches="SelectedBranches"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleCitySelectedEvent="HandleCitySelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
                         HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" ></AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
              ShowDetailsPage="ShowDetailsPage"
              HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<ContextMenu @ref="contextMenu" HandleDeleteClicked="DeleteClicked"
             HandleEditClicked="EditClicked"
             HandleViewClicked="ViewClicked"
             HandleAddHealthClicked="AddHealthClicked"
             HandleAddOvertimeClicked="AddOvertimeClicked"
             HandleAddSactionClicked="AddSactionClicked"
             HandleAddVacationClicked="AddVacationClicked" 
             />
<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent"/>

<OvertimeDialog @ref="overtimeDialog" ItemModel="Overtime" OvertimeTypes="OvertimeTypes" 
    HandleSaveOperationEvent="SaveOvertimeEvent"/>

<SactionDialog @ref="sactionDialog" ItemModel="Saction" SactionTypes="SactionTypes"
               HandleSaveOperationEvent="SaveSactionEvent" />

<VacationDialog @ref="vacationDialog" ItemModel="Vacation" VacationTypes="VacationTypes"
               HandleSaveOperationEvent="SaveVacationEvent"/>
@code {
    private SfGrid<Employee>? DefaultGrid;

    AddOrUpdateEmployeePage? addOrUpdateEmployee;
    public List<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    // Country // City // Town
    public List<Country> DefaultContries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    // General Department // Department // Branch
    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetOvertimeTypes();
        await GetSactionTypes();
        await GetVacationTypes();
    }
    private async Task LoadDefaults()
    {
        DefaultContries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await brachService.GetAll(Constants.BranchBaseUrl);
    }

    //Country select
    private void HandleCountrySelectedEvent(int countryId) =>
    SelectedCities = DefaultCities.Where(c => c.CountryId == countryId).ToList();

    //City select
    private void HandleCitySelectedEvent(int cityId) =>
    SelectedTowns = DefaultTowns.Where(t => t.CityId == cityId).ToList();

    //General Department select
    void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) =>
    SelectedDepartments = DefaultDepartments.Where(gd => gd.GeneralDepartmentId == generalDepartmentId).ToList();

    //Department select
    void HandleDepartmentSelectedEvent(int departmentId) =>
    SelectedBranches = DefaultBranches.Where(d => d.DepartmentId == departmentId).ToList();

    //Notify parent when Add or update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    //Load Employee
    private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    //Save Employee
    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
            addOrUpdateEmployee!.ClearContent();
    }
    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    //Context menu
    //Show Menu popups
    ContextMenu? contextMenu;

    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopup(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    //Edit Clicked
    void EditClicked()
    {
        //EmployeeGroup1
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        //EmployeeGroup2
        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other;

        //General Department / Department / Branch
        addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name;

        //Country / City / Town
        addOrUpdateEmployee!.Country = SelectedEmployee.Town!.City!.Country!.Name;
        addOrUpdateEmployee!.City = SelectedEmployee.Town!.City!.Name;
        addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name;

        //Title
        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    //Delete clicked
    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee}?", "Confirm Delete");
        if (!confirm) return;

        var response = await brachService.DeleteId(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if(result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    //View Clicked
    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }

    private async Task GetOvertimeTypes() => 
    OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task GetSactionTypes() => 
    SactionTypes = await sactionTypeService.GetAll(Constants.SactionTypeBaseUrl);

    private async Task GetVacationTypes() => 
    VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    //Add Health clicked
    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    private void AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog!.OpenDialog();
    }

    //Save Health Handler
    async Task SaveHealthEvent(Doctor item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message);
        if(response)
        {
            SelectedEmployee = new();
            Doctor = new();
            doctorDialog!.CloseDialog();
        }
    }

    //Add Overtime Clicked
    OvertimeDialog? overtimeDialog;
    Overtime Overtime = new();
    List<OvertimeType> OvertimeTypes = [];
    private void AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu.CloseContextMenu();
        overtimeDialog!.OpenDialog();
    }

    //Save Overtime Handler
    async Task SaveOvertimeEvent(Overtime item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMessage(flag, message);
        if(response)
        {
            SelectedEmployee = new();
            Overtime = new();
            overtimeDialog!.CloseDialog();
        }
    }



    //Add Sanction clicked
    SactionDialog? sactionDialog;
    Saction Saction = new();
    List<SactionType> SactionTypes = [];
    private void AddSactionClicked()
    {
        Saction.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        sactionDialog!.OpenDialog();
    }

    //Save Saction Handler
    async Task SaveSactionEvent(Saction item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await sactionService.Insert(item, Constants.SactionBaseUrl);
        var response = await DisplayMessage(flag, message);
        if(response)
        {
            SelectedEmployee = new();
            Saction = new();
            sactionDialog!.CloseDialog();
        }
    }

    //Add Vacation clicked
    VacationDialog? vacationDialog;
    Vacation Vacation = new();
    List<VacationType> VacationTypes = [];
    private void AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog!.OpenDialog();
    }

    //Save Vacation Handler
    async Task SaveVacationEvent(Vacation item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Vacation = new();
            vacationDialog!.CloseDialog();
        }
    }

    //Details employee Close btn clicked
    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    //Excel export / PDF Export
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }


    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Option");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Success Option");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
